# -*- coding: utf-8 -*-
"""Copy of Multiple_Disease_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17NLA2QjJH_GePPpDpKs-GUXiNBwui28k

**Importing Required Libraries (Dependencies)**
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""**Data Collection and Analysis**"""

#Uploading and reading the CSV file
multiple_disease_dataset=pd.read_csv('/content/Diseasedata.csv')

#checking for NaN values
print(multiple_disease_dataset.isnull().sum())

"""# New Section"""

#Printing first five lines of the file (optional)
multiple_disease_dataset.head()

#Counting no.of rows and columns (optional)
multiple_disease_dataset.shape

#Descriptions of values of every features (optional)
multiple_disease_dataset.describe()

#No.of times a disease has been taken in the data set (optional)
multiple_disease_dataset['Disease'].value_counts()

#Seperating the data and disease
X = multiple_disease_dataset.drop(columns='Disease',axis=1)
Y = multiple_disease_dataset['Disease']

#Printing the values of X and Y (optional)
print(X)
print(Y)

"""**Splitting, Training and Testing the data**"""

#Splitting the data into training and testing with size 80% and 20% respectively
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.33,stratify=Y,random_state=42)

#Training the data using the Random Forest Model
classifier=RandomForestClassifier()
classifier.fit(X_train,Y_train)

"""**Model Evaluation**"""

#Predicting the outcomes for the trained data using random forest model
X_train_prediction_R=classifier.predict(X_train)

#Measuring accuracy score for training data using random forest model
train_data_accuracy_R=accuracy_score(X_train_prediction_R,Y_train)
print(train_data_accuracy_R)

#Predicting the outcomes for the test data using random forest model
X_test_prediction_R=classifier.predict(X_test)

#Measuring the accuracy score for the test data using random forest model
test_data_accuracy_R=accuracy_score(Y_test,X_test_prediction_R)
print(test_data_accuracy_R)

"""**Savind the Model**"""

#Importing the required library for loading and saving the model
import pickle

#saving the model
filename='trained_model.sav'
pickle.dump(classifier,open(filename,'wb'))

#loading the saved model
loaded_model=pickle.load(open('/content/trained_model.sav','rb'))

"""**Predicting System**"""

# Define symptom list (all feature names)
all_symptoms = list(X.columns)

# Taking symptoms as input from the user
input_symptoms = {'Cough', 'NA', 'NA', 'NA', 'Sweating'}

# Converting the input to feature vector
input_data = [1 if symptom in input_symptoms else 0 for symptom in all_symptoms]

#Changing the data into numpy array data frame
input_data_as_numpy=np.asarray(input_data)

#Reshaping the data
input_data_reshaped=input_data_as_numpy.reshape(1,-1)

#Predicting the Output
prediction=loaded_model.predict(input_data_reshaped)

#Printing the output as Yes or No
print(prediction[0])